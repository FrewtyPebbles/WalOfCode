<h2>About the Project:</h2>
<p></p>
	<p style = "text-indent:40px"><i>noodlePy</i> is an elaborate joke language that I made for fun in python.  I thought it would be
	funny to make a language that is based arround the theme of pasta.</p>
<p></p>
<h2>Noteworthy Features:</h2>
<p></p>
<ul>
  <li>Working scope and conditions.</li>
  <li>Source files are interpreted using character and word streams making indentation and newlines optional.</li>
  <li>Variable system with instantiation and assignment.</li>
  <li>A parsing system for keywords and built in methods.</li>
  <li>Working Functions.</li>
</ul>
<p></p>
<h2>Documentation:</h2>
<p></p>
<p style = "text-indent:40px">To execute a <b>.pasta</b> script execute the python script "<i>noodleInterpreter.py [pastaSourceFileName]</i>" via the terminal replacing
 <i>[pastaSourceFileName]</i> with the name of your <i>noodlePy</i> script.</p>
 <p style = "text-indent:40px"><b>IMPORTANT: All of your noodle code that executes outside of functions must be placed within a PLAIN SCOPE (<i>? your main code ?<i/>) 
 that has NO statement AFTER your function definitions.  Variable instantiations must go at the verry top 
 of your script.  Refer to the <i>example.pasta</i> source file in the project download if you are confused.</b></p>
<a style = "text-align:left">
<ul>
  <li><b>noodle [Variable Name] [Value]|</b><p></p>Instantiates a variable.</li>
  <p></p>
  <li><b>p~[Variable Name or Content To Print]</b><i>[concatenation(s):</i> <b>~[Variable Name or "String"]</b><i>]</i><b>|</b><p></p>Prints the provided value.</li>
  <p></p>
  
  <li><b>^[Variable Name] is [Value or Variable Name]
  <p>?</p>
  <p></p>
  <p>?</p></b>Code within the <i>?</i> executes if the statement after the <i>^</i> is true.</li>
  <p></p>
  <li><b>^[Variable Name] isn't [Value or Variable Name]
  <p>?</p>
  <p></p>
  <p>?</p></b>Code within the <i>?</i> executes if the statement after the <i>^</i> is false.</li>
  <p></p>
  <li><b>^[Variable Name] more'n [Value or Variable Name]
  <p>?</p>
  <p></p>
  <p>?</p></b>Code within the <i>?</i> Executes if the first variable is greater than the second variable.</li>
  <p></p>
  <li><b>^[Variable Name] less'n [Value or Variable Name]
  <p>?</p>
  <p></p>
  <p>?</p></b>Code within the <i>?</i> Executes if the first variable is less than the second variable.</li>
  <p></p>
  <li><b>^[Variable Name] equal'err [Value or Variable Name]
  <p>?</p>
  <p></p>
  <p>?</p></b>Code within the <i>?</i> Executes if the first variable is greater than or equal to the second variable.</li>
  <p></p>
  <li><b>^[Variable Name] equal'ess [Value or Variable Name]
  <p>?</p>
  <p></p>
  <p>?</p></b>Code within the <i>?</i> Executes if the first variable is less than or equal to the second variable.</li>
  <p></p>
  <li><b>sauce [Function Name]
  <p>?</p>
  <p></p>
  <p>?</p></b>Code within the <i>?</i> executes when the function is called.</li>
  <p></p>
  <li><b>[Function Name]~|</b><p></p>Calls the given function.</li>
  <p></p>
  <li><b>[Variable Name] = [Value or Variable Name]|</b><p></p>Assigns a variable.</li>
  <p></p>
  <li><b>[Variable Name]$[Variable Name or Number]|</b><p></p>Subtract a value from the first variable.</li>
  <p></p>
  <li><b>[Variable Name]+[Variable Name or Number]|</b><p></p>Add a value to the first variable.</li>
  <p></p>
  <li><b>[Variable Name]*[Variable Name or Number]|</b><p></p>Multiply a value times the first variable.</li>
  <p></p>
  <li><b>[Variable Name]/[Variable Name or Number]|</b><p></p>Divide the first variable by a number.</li>
  <p></p>
</ul>
</a>
<p></p>